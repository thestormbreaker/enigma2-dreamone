diff --git a/lib/dvb/decoder.cpp b/lib/dvb/decoder.cpp
index 4187a0c98..26f19c359 100644
--- a/lib/dvb/decoder.cpp
+++ b/lib/dvb/decoder.cpp
@@ -15,6 +15,7 @@
 #include <sys/types.h>
 #include <sys/stat.h>
 #include <errno.h>
+#include <dlfcn.h>
 
 #ifndef VIDEO_SOURCE_HDMI
 #define VIDEO_SOURCE_HDMI 2
@@ -28,26 +29,109 @@ DEFINE_REF(eDVBAudio);
 eDVBAudio::eDVBAudio(eDVBDemux *demux, int dev)
 	:m_demux(demux), m_dev(dev)
 {
-	char filename[128];
-	sprintf(filename, "/dev/dvb/adapter%d/audio%d", demux ? demux->adapter : 0, dev);
-	m_fd = ::open(filename, O_RDWR | O_CLOEXEC);
-	if (m_fd < 0)
-		eWarning("[eDVBAudio] %s: %m", filename);
+	char *error = NULL;
+	m_fd_demux = -1;
+	
+	if (!(lib_handle = dlopen ("/usr/lib/libaudio.so", RTLD_LAZY)))
+    {
+        if ((error = dlerror()) != NULL)
+            eDebug("[eDVBAudio] A dynamic linking error occurred: (%s)", error);
+        return;
+	}
+	dlerror();
+	
+	__AudioCodec_init = (int (*)(int , int)) dlsym (lib_handle, "AudioCodec_init");
+	if ((error = dlerror()) != NULL)
+	{
+        eDebug("[eDVBAudio] AudioCodec init error: (%s)", error);
+		dlclose(lib_handle);		
+        return;
+	}
+	dlerror();	
+	
+	__AudioCodec_startPid = (int (*)(int , int, int)) dlsym (lib_handle, "AudioCodec_startPid");
+	if ((error = dlerror()) != NULL)
+	{
+        eDebug("[eDVBAudio] AudioCodec startPid error: (%s)", error);
+		dlclose(lib_handle);		
+        return;
+	}
+	dlerror();
+	
+	__AudioCodec_stop = (void (*)(void)) dlsym (lib_handle, "AudioCodec_stop");
+	if ((error = dlerror()) != NULL)
+	{
+        eDebug("[eDVBAudio] AudioCodec stop error: (%s)", error);
+		dlclose(lib_handle);		
+        return;
+	}
+	dlerror();	
+	
+	__AudioCodec_flush = (void (*)(void)) dlsym (lib_handle, "AudioCodec_flush");
+	if ((error = dlerror()) != NULL)
+	{
+        eDebug("[eDVBAudio] AudioCodec flush error: (%s)", error);
+		dlclose(lib_handle);		
+        return;
+	}
+	dlerror();
+	
+	__AudioCodec_freeze = (void (*)(void)) dlsym (lib_handle, "AudioCodec_freeze");	
+	if ((error = dlerror()) != NULL)
+	{
+        eDebug("[eDVBAudio] AudioCodec freeze error: (%s)", error);
+		dlclose(lib_handle);		
+        return;
+	}
+	dlerror();	
+	
+	__AudioCodec_unfreeze = (void (*)(void)) dlsym (lib_handle, "AudioCodec_unfreeze");
+	if ((error = dlerror()) != NULL)
+	{
+        eDebug("[eDVBAudio] AudioCodec unfreeze error: (%s)", error);
+		dlclose(lib_handle);		
+        return;
+	}
+	dlerror();
+	
+	__AudioCodec_setChannel = (void (*)(int)) dlsym (lib_handle, "AudioCodec_setChannel");
+	if ((error = dlerror()) != NULL)
+	{
+        eDebug("[eDVBAudio] AudioCodec setChannel error: (%s)", error);
+		dlclose(lib_handle);		
+        return;
+	}
+	dlerror();
+	
+	__AudioCodec_getPTS = (int (*)(__u64 *)) dlsym (lib_handle, "AudioCodec_getPTS");
+	if ((error = dlerror()) != NULL)
+	{
+        eDebug("[eDVBAudio] AudioCodec getPTS error: (%s)", error);
+		dlclose(lib_handle);		
+        return;
+	}
+	dlerror();	
+	
+	__AudioCodec_destroy = (void (*)(void)) dlsym (lib_handle, "AudioCodec_destroy");
+	if ((error = dlerror()) != NULL)
+	{
+        eDebug("[eDVBAudio] AudioCodec destroy error: (%s)", error);
+		dlclose(lib_handle);		
+        return;
+ 	}
+
+	dlerror();	
+	
 	if (demux)
 	{
-		sprintf(filename, "/dev/dvb/adapter%d/demux%d", demux->adapter, demux->demux);
-		m_fd_demux = ::open(filename, O_RDWR | O_CLOEXEC);
-		if (m_fd_demux < 0)
-			eWarning("[eDVBAudio] %s: %m", filename);
-	}
-	else
-	{
-		m_fd_demux = -1;
-	}
-
-	if (m_fd >= 0)
-	{
-		::ioctl(m_fd, AUDIO_SELECT_SOURCE, demux ? AUDIO_SOURCE_DEMUX : AUDIO_SOURCE_HDMI);
+		int num_adapter = demux->adapter;
+		int num_demux = demux->demux;
+		if(__AudioCodec_init != NULL)
+		{
+			m_fd_demux = (*__AudioCodec_init)(num_adapter, num_demux);
+			if(m_fd_demux < 0)
+				eDebug("[eDVBAudio] error open demux");
+		}
 	}
 }
 
@@ -55,206 +139,101 @@ int eDVBAudio::startPid(int pid, int type)
 {
 	if (m_fd_demux >= 0)
 	{
-		dmx_pes_filter_params pes;
-		memset(&pes, 0, sizeof(pes));
-
-		pes.pid      = pid;
-		pes.input    = DMX_IN_FRONTEND;
-		pes.output   = DMX_OUT_DECODER;
-		switch (m_dev)
-		{
-		case 0:
-			pes.pes_type = DMX_PES_AUDIO0;
-			break;
-		case 1:
-			pes.pes_type = DMX_PES_AUDIO1;
-			break;
-		case 2:
-			pes.pes_type = DMX_PES_AUDIO2;
-			break;
-		case 3:
-			pes.pes_type = DMX_PES_AUDIO3;
-			break;
-		}
-#if defined(__sh__) // increases zapping speed
-		pes.flags    = DMX_IMMEDIATE_START;
-#else
-	 	pes.flags    = 0;
-#endif
-		eDebugNoNewLineStart("[eDVBAudio%d] DMX_SET_PES_FILTER pid=0x%04x ", m_dev, pid);
-		if (::ioctl(m_fd_demux, DMX_SET_PES_FILTER, &pes) < 0)
-		{
-			eDebugNoNewLine("failed: %m");
-			return -errno;
-		}
-		eDebugNoNewLine("ok");
-#if not defined(__sh__) // already startet cause of DMX_IMMEDIATE_START
-		eDebugNoNewLineStart("[eDVBAudio%d] DEMUX_START ", m_dev);
-		if (::ioctl(m_fd_demux, DMX_START) < 0)
-		{
-			eDebugNoNewLine("failed: %m");
-			return -errno;
-		}
-		eDebugNoNewLine("ok");
-#endif
-	}
-
-	if (m_fd >= 0)
-	{
-		int bypass = 0;
-
-		switch (type)
+		if(__AudioCodec_startPid != NULL)
 		{
-		case aMPEG:
-			bypass = 1;
-			break;
-		case aAC3:
-		case aAC4: /* FIXME: AC4 most probably will use other bypass value */
-			bypass = 0;
-			break;
-		case aDTS:
-			bypass = 2;
-			break;
-		case aAAC:
-			bypass = 8;
-			break;
-		case aAACHE:
-			bypass = 9;
-			break;
-		case aLPCM:
-			bypass = 6;
-			break;
-		case aDTSHD:
-			bypass = 0x10;
-			break;
-		case aDRA:
-			bypass = 0x40;
-			break;			
-		case aDDP:
-#ifdef DREAMBOX
-		bypass = 7;
-#else
-		bypass = 0x22;
-#endif
-		case aPCM:
-#ifdef DREAMBOX
-		bypass = 0xf;
-#else
-		bypass = 0x30;
-#endif				
-		break;
+			eDebug("[eDVBAudio] startPid pid:%x m_dev:%d type:%d", pid, m_dev, type);
+			return (*__AudioCodec_startPid)(pid, m_dev, type);
 		}
 
-		eDebugNoNewLineStart("[eDVBAudio%d] AUDIO_SET_BYPASS bypass=%d ", m_dev, bypass);
-		if (::ioctl(m_fd, AUDIO_SET_BYPASS_MODE, bypass) < 0)
-			eDebugNoNewLine("failed: %m");
-		else
-			eDebugNoNewLine("ok");
-#if not defined(__sh__) // this is a hack which only matters for dm drivers
-		freeze();  // why freeze here?!? this is a problem when only a pid change is requested... because of the unfreeze logic in Decoder::setState
-#endif
-		eDebugNoNewLineStart("[eDVBAudio%d] AUDIO_PLAY ", m_dev);
-		if (::ioctl(m_fd, AUDIO_PLAY) < 0)
-			eDebugNoNewLine("failed: %m");
-		else
-			eDebugNoNewLine("ok");
 	}
 	return 0;
 }
 
 void eDVBAudio::stop()
 {
-	if (m_fd >= 0)
-	{
-		eDebugNoNewLineStart("[eDVBAudio%d] AUDIO_STOP ", m_dev);
-		if (::ioctl(m_fd, AUDIO_STOP) < 0)
-			eDebugNoNewLine("failed: %m");
-		else
-			eDebugNoNewLine("ok");
-	}
 	if (m_fd_demux >= 0)
-	{
-		eDebugNoNewLineStart("[eDVBAudio%d] DEMUX_STOP ", m_dev);
-		if (::ioctl(m_fd_demux, DMX_STOP) < 0)
-			eDebugNoNewLine("failed: %m");
-		else
-			eDebugNoNewLine("ok");
+	{	
+		if(__AudioCodec_stop != NULL)
+		{
+			eDebug("[eDVBAudio] stop");
+			(*__AudioCodec_stop)();
+		}
 	}
 }
 
 void eDVBAudio::flush()
 {
-	if (m_fd >= 0)
-	{
-		eDebugNoNewLineStart("[eDVBAudio%d] AUDIO_CLEAR_BUFFER ", m_dev);
-		if (::ioctl(m_fd, AUDIO_CLEAR_BUFFER) < 0)
-			eDebugNoNewLine("failed: %m");
-		else
-			eDebugNoNewLine("ok");
+	if (m_fd_demux >= 0)
+		if(__AudioCodec_flush != NULL)
+		{
+			eDebug("[eDVBAudio] flush");
+			(*__AudioCodec_flush)();
+		}
 	}
 }
 
 void eDVBAudio::freeze()
 {
-	if (m_fd >= 0)
-	{
-		eDebugNoNewLineStart("[eDVBAudio%d] AUDIO_PAUSE ", m_dev);
-		if (::ioctl(m_fd, AUDIO_PAUSE) < 0)
-			eDebugNoNewLine("failed: %m");
-		else
-			eDebugNoNewLine("ok");
+	if (m_fd_demux >= 0)
+		if(__AudioCodec_freeze != NULL)
+		{
+			eDebug("[eDVBAudio] freeze");
+			(*__AudioCodec_freeze)();
+		}
 	}
 }
 
 void eDVBAudio::unfreeze()
 {
-	if (m_fd >= 0)
+	if (m_fd_demux >= 0)
 	{
-		eDebugNoNewLineStart("[eDVBAudio%d] AUDIO_CONTINUE ", m_dev);
-		if (::ioctl(m_fd, AUDIO_CONTINUE) < 0)
-			eDebugNoNewLine("failed: %m");
-		else
-			eDebugNoNewLine("ok");
+		if(__AudioCodec_unfreeze != NULL)
+		{		
+			eDebug("[eDVBAudio] unfreeze");
+			(*__AudioCodec_unfreeze)();
+		}
 	}
 }
 
 void eDVBAudio::setChannel(int channel)
 {
-	if (m_fd >= 0)
+	if (m_fd_demux >= 0)
 	{
-		int val = AUDIO_STEREO;
-		switch (channel)
+		if(__AudioCodec_setChannel != NULL
 		{
-		case aMonoLeft: val = AUDIO_MONO_LEFT; break;
-		case aMonoRight: val = AUDIO_MONO_RIGHT; break;
-		default: break;
+			eDebug("[eDVBAudio] setChannel");
+			(*__AudioCodec_setChannel)(channel);
 		}
-		eDebugNoNewLineStart("[eDVBAudio%d] AUDIO_CHANNEL_SELECT %d ", m_dev, val);
-		if (::ioctl(m_fd, AUDIO_CHANNEL_SELECT, val) < 0)
-			eDebugNoNewLine("failed: %m");
-		else
-			eDebugNoNewLine("ok");
 	}
 }
 
 int eDVBAudio::getPTS(pts_t &now)
 {
-	if (m_fd >= 0)
+	if (m_fd_demux >= 0)
 	{
-		if (::ioctl(m_fd, AUDIO_GET_PTS, &now) < 0)
-			eDebug("[eDVBAudio%d] AUDIO_GET_PTS failed: %m", m_dev);
+		if(__AudioCodec_getPTS != NULL)
+		{
+			eDebug("[eDVBAudio] getPTS");
+			(*__AudioCodec_getPTS)((__u64*)&now);
+		}
 	}
 	return 0;
 }
 
 eDVBAudio::~eDVBAudio()
 {
-	unfreeze();  // why unfreeze here... but not unfreeze video in ~eDVBVideo ?!?
-	if (m_fd >= 0)
-		::close(m_fd);
 	if (m_fd_demux >= 0)
-		::close(m_fd_demux);
-	eDebug("[eDVBAudio%d] destroy", m_dev);
+	{
+		if(__AudioCodec_destroy != NULL)	
+		{
+			eDebug("[eDVBAudio] destroy");
+			(*__AudioCodec_destroy)();
+		}
+	}
+	if(lib_handle)
+	{
+		dlclose(lib_handle);
+	}
 }
 
 DEFINE_REF(eDVBVideo);
diff --git a/lib/dvb/decoder.h b/lib/dvb/decoder.h
index a883e9054..30e1ca5d8 100644
--- a/lib/dvb/decoder.h
+++ b/lib/dvb/decoder.h
@@ -12,6 +12,16 @@ class eDVBAudio: public iObject
 private:
 	ePtr<eDVBDemux> m_demux;
 	int m_fd, m_fd_demux, m_dev, m_is_freezed;
+	void  *lib_handle;
+	int  (*__AudioCodec_init)(int , int);
+	int  (*__AudioCodec_startPid)(int , int, int);
+	void (*__AudioCodec_stop)(void);	
+	void (*__AudioCodec_flush)(void);	
+	void (*__AudioCodec_freeze)(void);	
+	void (*__AudioCodec_unfreeze)(void);	
+	void (*__AudioCodec_setChannel)(int);
+	int  (*__AudioCodec_getPTS)(__u64 *);
+	void (*__AudioCodec_destroy)(void);
 public:
 	enum { aMPEG, aAC3, aDTS, aAAC, aAACHE, aLPCM, aDTSHD, aDDP, aDRA, aAC4, aPCM };
 	eDVBAudio(eDVBDemux *demux, int dev);
